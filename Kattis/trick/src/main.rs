use std::io; use std::str;
#[allow(unused_imports)] use std::convert::TryFrom;
#[allow(unused_imports)] use std::cmp::{Reverse, Ordering};
#[allow(unused_imports)] use std::collections::{LinkedList, HashSet, HashMap, BinaryHeap, BTreeSet, BTreeMap};

pub struct UnsafeScanner<R> { reader: R, buf_str: Vec<u8>, buf_iter: str::SplitAsciiWhitespace<'static>, } impl<R: io::BufRead> UnsafeScanner<R> { pub fn new(reader: R) -> Self { Self { reader, buf_str: vec![], buf_iter: "".split_ascii_whitespace(), } } pub fn trim_newline(s: &mut String) { if s.ends_with('\n') { s.pop(); if s.ends_with('\r') { s.pop(); } } } pub fn token<T: str::FromStr>(&mut self) -> Option<T> { loop { if let Some(token) = self.buf_iter.next() { return Some(token.parse().ok().expect("Failed parse")); } self.buf_str.clear(); let len = self.reader .read_until(b'\n', &mut self.buf_str) .expect("Failed read"); if len == 0 { return None; } self.buf_iter = unsafe { let slice = str::from_utf8_unchecked(&self.buf_str); std::mem::transmute(slice.split_ascii_whitespace()) } } } pub fn line(&mut self) -> Option<String> { let mut input = String::new(); let len = self.reader.read_line(&mut input).expect("Failed read"); match len { 0 => None, _ => { Self::trim_newline(&mut input); Some(input) } } } } fn main() { let (stdin, stdout) = (io::stdin(), io::stdout()); let mut scan = UnsafeScanner::new(stdin.lock()); let mut out = io::BufWriter::new(stdout.lock()); solve(&mut scan, &mut out); }

fn solve<R: io::BufRead, W: io::Write>(scan: &mut UnsafeScanner<R>, out: &mut W) {
    let n = scan.line().unwrap();
    let dot = n.find(".");
    let dec:u32 = if dot.is_some() {
        (n.len() - dot.unwrap() - 1) as u32
    } else {
        0
    };
    let n = n.replace(".", "");
    let n = n.parse::<usize>().unwrap();
    // Preprocess
    // let mut memo:HashMap<usize, Vec<usize>> = HashMap::new();
    // for i in  1..10usize.pow(8) {
    //     let dig = ((i as f64).log10() as u32) + 1;
    //     let shifted = (i % 10usize.pow(dig - 1)) * 10 + (i / 10usize.pow(dig - 1));
    //     let div = shifted as f64/i as f64;
    //     if format!("{:.4}000000", div) == format!("{:.10}", div) {
    //         let key = (div * 10000f64) as usize;
    //         match memo.get_mut(&key) {
    //             Some(val) => {
    //                 val.push(i);
    //             },
    //             None => {
    //                 memo.insert(key, vec![i]);
    //             },
    //         }
    //     }
    // }
    let memo = vec![(4450, vec![732600]), (26200, vec![13550, 27100]), (31360, vec![291375]), (15672, vec![35575372]), (42184, vec![17296250]), (41016, vec![16953750]), (34960, vec![15375]), (18100, vec![122100, 244200, 366300, 488400]), (21376, vec![254375]), (9350, vec![772200]), (48625, vec![19464720]), (9000, vec![109890, 219780, 329670, 439560, 549450, 659340, 769230, 879120, 989010]), (21952, vec![25625]), (16000, vec![238095, 476190]), (7268, vec![75486347]), (14375, vec![11678832, 23357664, 35036496, 46715328, 58394160]), (22000, vec![128205, 256410, 384615]), (18600, vec![122850, 245700, 368550, 491400]), (10900, vec![336700, 673400]), (11112, vec![11250, 22500, 33750, 45000, 56250, 67500, 78750]), (15344, vec![118125, 236250, 354375, 472500, 590625]), (23658, vec![39296848]), (25926, vec![135000, 270000]), (31168, vec![2905625]), (30625, vec![144, 288, 144144, 288288]), (49950, vec![199800]), (1600, vec![20325, 40650, 60975, 81300]), (41392, vec![170625]), (21160, vec![38051750]), (12387, vec![68482987]), (1, vec![10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000]), (39025, vec![16400]), (4762, vec![105000, 210000, 315000, 420000, 525000, 630000, 735000, 840000, 945000]), (48052, vec![192500]), (17120, vec![482625]), (24400, vec![132275, 264550, 396825]), (35760, vec![15566625]), (22780, vec![129500, 259000, 388500]), (32660, vec![148500, 297000]), (22078, vec![385000]), (20800, vec![25, 2525, 252525, 25252525]), (2800, vec![925, 925925]), (35000, vec![153846]), (9580, vec![11059500, 22119000, 33178500, 44238000, 55297500, 66357000, 77416500, 88476000, 99535500]), (16084, vec![357500]), (42116, vec![17275931]), (25408, vec![268125]), (8020, vec![76103500]), (26740, vec![136500, 273000]), (5059, vec![73730000]), (30700, vec![144300, 288600]), (3904, vec![208125, 416250, 624375, 832500]), (5391, vec![63418913]), (10426, vec![78147676]), (41500, vec![170940]), (5611, vec![10594567, 21189134, 31783701, 42378268, 52972835, 63567402, 74161969, 84756536, 95351103]), (5500, vec![740, 105820, 211640, 317460, 423280, 529100, 634920, 740740, 846560, 952380]), (34300, vec![15220700]), (2500, vec![102564, 205128, 307692, 410256, 512820, 615384, 717948, 820512, 923076]), (1257, vec![81019221]), (544, vec![804375]), (7033, vec![96808544]), (47089, vec![189000]), (41725, vec![171600]), (11800, vec![793650]), (44212, vec![1792500]), (17801, vec![12165598, 24331196, 36496794, 48662392]), (6760, vec![750, 107250, 214500, 321750, 429000, 536250, 643500, 750750, 858000, 965250]), (42280, vec![173250]), (44056, vec![178750]), (45946, vec![185000]), (7542, vec![86525773]), (23576, vec![39254684]), (44652, vec![18067500]), (36875, vec![1584, 15841584]), (13420, vec![115500, 231000, 346500, 462000, 577500, 693000]), (4960, vec![420875, 841750]), (770, vec![50387987]), (5022, vec![94759783]), (46672, vec![1875, 18751875]), (23322, vec![39125161]), (4372, vec![62743129]), (13375, vec![115440, 230880, 346320, 461760, 577200, 692640]), (48025, vec![192400]), (8750, vec![10958904, 21917808, 32876712, 43835616, 54794520, 65753424, 76712328, 87671232, 98630136]), (48750, vec![19512]), (11524, vec![11302500, 22605000, 33907500, 45210000, 56512500, 67815000, 79117500]), (7600, vec![75, 7575, 108225, 216450, 324675, 432900, 541125, 649350, 757575, 865800, 974025, 75757575]), (26000, vec![135, 270, 135135, 270270]), (17495, vec![36361873]), (42250, vec![173160]), (2236, vec![71601730]), (34000, vec![15, 1515, 151515, 15151515]), (4100, vec![72992700]), (10064, vec![77833125]), (38500, vec![16260]), (14, vec![80012001]), (5392, vec![95129375]), (12500, vec![571428]), (19192, vec![123750, 247500, 371250, 495000]), (5125, vec![94862659]), (46128, vec![185625]), (19700, vec![12453300, 24906600, 37359900, 49813200]), (47500, vec![190476]), (4570, vec![41915979, 83831958]), (3474, vec![103600, 207200, 310800, 414400, 518000, 621600, 725200, 828800, 932400]), (653, vec![90591562]), (11120, vec![1125, 2250, 3375, 4500, 5625, 6750, 7875, 11251125, 22502250, 33753375, 45004500, 56255625, 67506750, 78757875]), (42800, vec![174825]), (35065, vec![154000]), (16750, vec![120, 240, 360, 480, 120120, 240240, 360360, 480480]), (7648, vec![433125, 866250]), (10375, vec![1115760, 2231520, 3347280, 4463040, 5578800, 6694560, 7810320, 8926080]), (39994, vec![16665000]), (13275, vec![34592500, 69185000]), (9991, vec![11110000, 22220000, 33330000, 44440000, 55550000, 66660000, 77770000, 88880000, 99990000]), (40599, vec![168350]), (45250, vec![18264840]), (7234, vec![32339783, 64679566, 97019349]), (28300, vec![1394700, 2789400]), (5456, vec![74040383]), (8125, vec![761904]), (6676, vec![7500, 75007500]), (8425, vec![109200, 218400, 327600, 436800, 546000, 655200, 764400, 873600, 982800]), (28775, vec![140400, 280800]), (27730, vec![13837000, 27674000]), (33643, vec![15070000]), (1099, vec![910000]), (12736, vec![6875, 68756875]), (39775, vec![16604400]), (11200, vec![225, 450, 675, 225225, 450450, 675675]), (18897, vec![12330000, 24660000, 36990000, 49320000]), (3141, vec![72270000]), (12250, vec![113960, 227920, 341880, 455840, 569800, 683760, 797720]), (14200, vec![116550, 233100, 349650, 466200, 582750, 699300]), (43125, vec![175824]), (37000, vec![158730]), (31750, vec![146520, 293040]), (48718, vec![195000]), (3640, vec![10377750, 20755500, 31133250, 41511000, 51888750, 62266500, 72644250, 83022000, 93399750]), (22784, vec![38852051]), (9954, vec![99948914]), (13997, vec![46510005]), (13280, vec![46125]), (11439, vec![33875, 67750]), (5724, vec![742500]), (18000, vec![12195, 24390, 36585, 48780]), (20930, vec![25294043]), (603, vec![70424660]), (3750, vec![72, 7272, 103896, 207792, 311688, 415584, 519480, 623376, 727272, 831168, 935064, 72727272]), (26269, vec![13563000, 27126000]), (39940, vec![166500]), (23125, vec![13008, 26016, 39024]), (4400, vec![1046025, 2092050, 3138075, 4184100, 5230125, 6276150, 7322175, 8368200, 9414225]), (30265, vec![1434000, 2868000]), (12000, vec![45, 4545, 454545, 45454545]), (8664, vec![32845756, 65691512, 98537268]), (2000, vec![714285]), (38350, vec![16220600]), (9100, vec![1100, 2200, 3300, 4400, 5500, 6600, 7700, 8800, 9900, 11001100, 22002200, 33003300, 44004400, 55005500, 66006600, 77007700, 88008800, 99009900]), (39720, vec![16589250]), (7463, vec![97259444]), (39400, vec![1650, 16501650]), (13959, vec![1162250, 2324500, 3486750, 4649000, 5811250, 6973500]), (23000, vec![129870, 259740, 389610]), (285, vec![702000]), (10, vec![1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10001000, 20002000, 30003000, 40004000, 50005000, 60006000, 70007000, 80008000, 90009000]), (45748, vec![18432500]), (49125, vec![196560]), (32250, vec![14760, 29520]), (19920, vec![124875, 249750, 374625, 499500]), (22644, vec![38781736]), (12400, vec![11415525, 22831050, 34246575, 45662100, 57077625, 68493150, 79908675]), (18919, vec![370000]), (44500, vec![180, 180180]), (8224, vec![8716875]), (38224, vec![161875]), (33400, vec![150, 150150]), (27664, vec![13824375, 27648750]), (1719, vec![101750, 203500, 305250, 407000, 508750, 610500, 712250, 814000, 915750]), (30070, vec![143000, 286000]), (32185, vec![14746000, 29492000]), (35250, vec![154440]), (40250, vec![1673640]), (3205, vec![9298000]), (13174, vec![34551862, 69103724]), (18622, vec![36865000]), (25616, vec![1344375, 2688750]), (45800, vec![18450]), (4096, vec![625, 625625]), (12088, vec![113750, 227500, 341250, 455000, 568750, 682500, 796250]), (24650, vec![13271400, 26542800, 39814200]), (4775, vec![84012433]), (44450, vec![1800, 18001800]), (10000, vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 111, 222, 333, 444, 555, 666, 777, 888, 999, 1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999, 111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888, 999999, 1111111, 2222222, 3333333, 4444444, 5555555, 6666666, 7777777, 8888888, 9999999, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999]), (5150, vec![73800]), (12903, vec![57407258]), (45149, vec![18231208]), (1450, vec![30441400, 60882800, 91324200]), (2320, vec![102375, 204750, 307125, 409500, 511875, 614250, 716625, 819000, 921375]), (2875, vec![720, 102960, 205920, 308880, 411840, 514800, 617760, 720720, 823680, 926640]), (16978, vec![12045000, 24090000, 36135000, 48180000]), (22727, vec![38823392]), (44445, vec![18000]), (39875, vec![166320]), (8944, vec![76875]), (17800, vec![12165450, 24330900, 36496350, 48661800]), (2440, vec![10250, 20500, 30750, 41000, 51250, 61500, 71750, 82000, 92250]), (33334, vec![15000]), (45054, vec![182000]), (44560, vec![180375]), (17500, vec![12, 24, 36, 48, 1212, 2424, 3636, 4848, 121212, 242424, 363636, 484848, 12121212, 24242424, 36363636, 48484848]), (9910, vec![111000, 222000, 333000, 444000, 555000, 666000, 777000, 888000, 999000]), (9280, vec![661375]), (38575, vec![162800]), (29800, vec![142450, 284900]), (35650, vec![155400]), (16688, vec![36009218]), (14530, vec![117000, 234000, 351000, 468000, 585000]), (8272, vec![763125]), (17875, vec![12176560, 24353120, 36529680, 48706240]), (3800, vec![103950, 207900, 311850, 415800, 519750, 623700, 727650, 831600, 935550]), (1000, vec![10, 20, 30, 40, 50, 60, 70, 80, 90, 1010, 2020, 3030, 4040, 5050, 6060, 7070, 8080, 9090, 101010, 202020, 303030, 404040, 505050, 606060, 707070, 808080, 909090, 10101010, 20202020, 30303030, 40404040, 50505050, 60606060, 70707070, 80808080, 90909090]), (17632, vec![485625]), (23077, vec![130000, 260000, 390000]), (49500, vec![1980, 19801980]), (21250, vec![126984, 253968, 380952]), (27928, vec![138750, 277500]), (24925, vec![133200, 266400, 399600]), (48520, vec![194250]), (25750, vec![134680, 269360]), (3879, vec![41614215, 83228430]), (30000, vec![142857, 285714]), (11478, vec![79076387]), (20635, vec![126000, 252000, 378000]), (7750, vec![10840, 21680, 32520, 43360, 54200, 65040, 75880, 86720, 97560]), (30815, vec![14454000, 28908000]), (6445, vec![962000]), (32500, vec![148, 296, 148148, 296296]), (49995, vec![19998000]), (38125, vec![16, 1616, 161616, 16161616]), (43019, vec![175500]), (22300, vec![128700, 257400, 386100]), (208, vec![300625, 601250, 901875]), (12640, vec![457875]), (31624, vec![146250, 292500]), (27280, vec![1375, 2750, 13751375, 27502750]), (20080, vec![125, 250, 375, 125125, 250250, 375375]), (30736, vec![144375, 288750]), (39394, vec![165000]), (16318, vec![1195000, 2390000, 3585000, 4780000, 5975000]), (19000, vec![370, 370370]), (23040, vec![259875]), (2371, vec![7170000]), (49494, vec![198000]), (7336, vec![323750, 647500, 971250]), (46375, vec![186480]), (15760, vec![356125]), (42640, vec![1743375]), (22912, vec![25944375]), (12752, vec![34384742, 68769484]), (26875, vec![136752, 273504]), (10625, vec![111888, 223776, 335664, 447552, 559440, 671328, 783216, 895104]), (36508, vec![157500]), (6188, vec![10659617, 21319234, 31978851, 42638468, 53298085, 63957702, 74617319, 85276936, 95936553]), (19200, vec![2475, 4950, 24752475, 49504950]), (37840, vec![160875]), (27512, vec![13795577, 27591154]), (8832, vec![219375, 438750, 658125, 877500]), (31500, vec![14598540, 29197080]), (2980, vec![721500]), (15825, vec![118800, 237600, 356400, 475200, 594000]), (33340, vec![1500, 15001500]), (27200, vec![274725]), (3552, vec![41473125, 82946250]), (45400, vec![183150]), (24250, vec![1320, 2640, 3960, 13201320, 26402640, 39603960]), (16840, vec![120250, 240500, 360750, 481000]), (34480, vec![152625]), (38950, vec![163800]), (48200, vec![193050]), (7020, vec![1075500, 2151000, 3226500, 4302000, 5377500, 6453000, 7528500, 8604000, 9679500]), (20008, vec![1250, 2500, 3750, 12501250, 25002500, 37503750]), (11625, vec![7920, 79207920]), (27850, vec![138600, 277200]), (28500, vec![139860, 279720]), (1360, vec![10137875, 20275750, 30413625, 40551500, 50689375, 60827250, 70965125, 81103000, 91240875]), (47440, vec![19025875]), (11688, vec![33970468, 67940936]), (27000, vec![13698630, 27397260]), (46000, vec![185, 185185]), (15625, vec![592, 592592]), (18700, vec![12300, 24600, 36900, 49200]), (19992, vec![12498750, 24997500, 37496250, 49995000]), (9476, vec![77328413]), (6113, vec![42604407, 85208814]), (100, vec![100, 200, 300, 400, 500, 600, 700, 800, 900, 100100, 200200, 300300, 400400, 500500, 600600, 700700, 800800, 900900]), (45199, vec![18248175]), (45000, vec![18, 1818, 181818, 18181818]), (3040, vec![4125, 8250, 41254125, 82508250]), (46224, vec![1859600]), (7500, vec![108, 216, 324, 432, 540, 648, 756, 864, 972, 108108, 216216, 324324, 432432, 540540, 648648, 756756, 864864, 972972]), (9402, vec![77264398]), (16675, vec![1200, 2400, 3600, 4800, 12001200, 24002400, 36003600, 48004800]), (2098, vec![715000]), (6400, vec![213675, 427350, 641025, 854700]), (9091, vec![110000, 220000, 330000, 440000, 550000, 660000, 770000, 880000, 990000]), (8480, vec![874125]), (7524, vec![32441200, 64882400, 97323600])];
    let memo: HashMap<usize, Vec<usize>> = memo.iter().cloned().collect();
    let n = n * 10usize.pow(4 - dec);
    match memo.get(&n) {
        Some(res) => for r in res {
            writeln!(out, "{}", r);
        }
        None => {writeln!(out, "No solution");}
    }
}
